@page "/authors"
@inject HttpClient crud
@inject IJSRuntime js
@inject NavigationManager nav

<!-- Breadcrumb -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><span class="oi oi-question-mark text-info" aria-hidden="true" title="Comments about this page" @onclick="@Comments" /></li>
        <li class="breadcrumb-item"><a href="#">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Authors</li>
    </ol>
</nav>

<h3>Authors List</h3>

<hr />

<!-- Add Form -->
<AuthorForm Author="@author"
            ContextButtonText="Add Author"
            OnValidSubmit="@CreateAuthor" />

<br />

<!-- List -->
<div class="container-fluid">
    @if (authors == null)
    {
        <text>Loading...</text>
    }
    else if (authors.Count == 0)
    {
        <text>No authors to show...</text>
    }
    else
    {
        <table class="table table-striped table-sm">
            <thead class="thead-dark">
                <tr>
                    <th style="width: 5%;" scope="col">ID</th>
                    <th style="width: 85%;" scope="col">Name</th>
                    <th style="width: 10%;" scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>

                @foreach (Author author in authors)
                {
                    <tr>
                        <th scope="row">@author.AuthorId</th>
                        <td>@author.FirstName @author.LastName</td>
                        <td>
                            <a class="oi oi-book text-primary" aria-hidden="true"
                               href="authors/managebooks/@author.AuthorId" title="Manage books"/>
                            <a class="oi oi-pencil text-warning" aria-hidden="true"
                               href="authors/edit/@author.AuthorId" title="Edit author"/>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    }
</div>

@code {
    List<Author> authors { get; set; }
    Author author = new Author();

    // This will get ALL autorh data from DB
    protected override async Task OnInitializedAsync()
    {
        authors = await crud.GetFromJsonAsync<List<Author>>("api/Authors");
    }

    // This will add author data on DB
    async Task CreateAuthor()
    {
        await crud.PostAsJsonAsync("api/Authors", author);
        await js.InvokeVoidAsync("alert", $"New author, {author.FirstName} {author.LastName}, added succesfully!");

        // Clear fields
        author.FirstName = "";
        author.LastName = "";
        await OnInitializedAsync();
    }

    // Comments
    public async Task Comments()
    {
        string comments =
            "This page is for the listing of existing authors and for the creation of new authors. \n\n" +
            "From a CRUD perspective, this is CR__. \n" +
            "This page makes use of a component, AuthorForm. I REALLY don't remember why I decided to have the authors creation form on the same page of the list... But, as you can see, there is no way to delete an author, and that is because even after he or she stops writing, the books will still be theirs and carry their names. So, no delete.";

        await js.InvokeVoidAsync("alert", $"{comments}");
    }
}
