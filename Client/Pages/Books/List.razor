@page "/books"
@inject HttpClient crud
@inject IJSRuntime js

<!-- Breadcrumb -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Books</li>
    </ol>
</nav>

<h3>Books List</h3>

<hr />

<!-- Context Button -->
<div class="container-fluid">
    <div class="float-right pb-2">
        <a class="btn btn-outline-success btn-sm" href="books/add">
            <span class="oi oi-plus" aria-hidden="true"></span> Add New Book
        </a>
    </div>
</div>

<!-- List -->
<div class="container-fluid">
    @if (books == null)
    {
        <text>Loading...</text>
    }
    else if (books.Count == 0)
    {
        <text>No books to show...</text>
    }
    else
    {
        <table class="table table-striped table-sm">
            <thead class="thead-dark">
                <tr>
                    <th style="width: 5%;" scope="col">Reg.</th>
                    <th style="width: 35%;" scope="col">Title</th>
                    <th style="width: 50%;" scope="col">Author(s)</th>
                    <th style="width: 10%;" scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>

                <!-- Basically, gets the BOOK to show book data... -->
                @foreach (Book book in books)
                {
                    <tr>
                        <!-- ... print basic stuff... -->
                        <th scope="row">@book.BookId</th>
                        <td>@book.Title</td>
                        <td>

                            <!-- ... then checks all the AUTHORBOOKS relations... -->
                            @foreach (AuthorBook authorbook in authorbooks)
                            {
                                <!-- ... to see if it has someone linked to the book... -->
                                if (authorbook.BookId == book.BookId)
                                {
                                    <!-- ... and, if it does, check all the AUTHORS... -->
                                    foreach (Author author in authors)
                                    {
                                        <!-- ... and compare with the author's id in the relations... -->
                                        if (authorbook.AuthorId == author.AuthorId)
                                        {
                                            <!-- ... to, finally, print some more stuff -->
                                            <spam>@author.FirstName @author.LastName |</spam>
                                        }
                                    }
                                }
                            }
                        </td>
                        <td>
                            <a class="oi oi-pencil text-warning" aria-hidden="true" href="books/edit/@book.BookId" />
                            <a class="oi oi-trash text-danger" aria-hidden="true" href="books/delete/@book.BookId" />
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    }
</div>

@code {
    List<Book> books { get; set; }
    List<Author> authors { get; set; }
    List<AuthorBook> authorbooks { get; set; }

    // This will get ALL book data from DB... and authors and the author-book relations
    protected override async Task OnInitializedAsync()
    {
        books = await crud.GetFromJsonAsync<List<Book>>("api/Books");
        authors = await crud.GetFromJsonAsync<List<Author>>("api/Authors");
        authorbooks = await crud.GetFromJsonAsync<List<AuthorBook>>("api/AuthorBooks");
    }

    // This will prompt a confirmation to delete entry
    async Task DeleteMember(int BookId)
    {
        var book = books.First(x => x.BookId == BookId);

        if (await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete 's registry?"))
        {
            await crud.DeleteAsync($"api/Books/{BookId}");
            await OnInitializedAsync();
        }
    }
}
